name: 🧪 Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    # 后端测试
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        
    - name: 📥 Install Python dependencies
      working-directory: ./video-learning-helper-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: 🧪 Run backend unit tests
      working-directory: ./video-learning-helper-backend
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        
    # 前端测试
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./video-learning-helper-frontend/package-lock.json
        
    - name: 📥 Install Node dependencies
      working-directory: ./video-learning-helper-frontend
      run: npm ci
      
    - name: 🧪 Run frontend unit tests
      working-directory: ./video-learning-helper-frontend
      run: npm test -- --coverage --passWithNoTests
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./video-learning-helper-backend/coverage.xml
        flags: backend
        name: backend-coverage
        
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build test environment
      run: |
        docker-compose -f docker-compose.test.yml build
        
    - name: 🧪 Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit
        
    - name: 📋 Collect test results
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml logs > integration-test-logs.txt
        
    - name: 📤 Upload test logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-logs
        path: integration-test-logs.txt
        
  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Bandit security linter
      uses: jpetrucciani/bandit-check@main
      with:
        path: './video-learning-helper-backend'
        
    - name: 🔍 Run npm audit
      working-directory: ./video-learning-helper-frontend
      run: |
        npm audit --audit-level=moderate
        
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif' 