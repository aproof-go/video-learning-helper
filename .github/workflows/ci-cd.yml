name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 🧪 测试阶段
  test-backend:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📥 Install dependencies
      working-directory: ./video-learning-helper-backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🧪 Run backend tests
      working-directory: ./video-learning-helper-backend
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

  test-frontend:
    name: ⚛️ Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./video-learning-helper-frontend/package-lock.json
        
    - name: 📥 Install dependencies
      working-directory: ./video-learning-helper-frontend
      run: npm ci
      
    - name: 🔧 Build frontend
      working-directory: ./video-learning-helper-frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        
    - name: 🧪 Run frontend tests
      working-directory: ./video-learning-helper-frontend
      run: npm test -- --passWithNoTests

  # 🏗️ 构建阶段
  build-backend:
    name: 🐍 Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./video-learning-helper-backend
        file: ./video-learning-helper-backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/video-learning-helper-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/video-learning-helper-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 🚀 部署阶段
  deploy-frontend:
    name: 🌐 Deploy Frontend
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./video-learning-helper-frontend
        vercel-args: '--prod'

  deploy-backend:
    name: 🖥️ Deploy Backend
    runs-on: ubuntu-latest
    needs: [build-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Deploy to Railway
      uses: railway/cli@v3
      with:
        token: ${{ secrets.RAILWAY_TOKEN }}
        command: up --service backend
      env:
        RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

  # 📱 通知阶段
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📧 Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always() 